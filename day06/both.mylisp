; load data (pasted from browser)
(set! data "3,1,4,2,1,1,1,1,1,1,1,4,1,4,1,2,1,1,2,1,3,4,5,1,1,4,1,3,3,1,1,1,1,3,3,1,3,3,1,5,5,1,1,3,1,1,2,1,1,1,3,1,4,3,2,1,4,3,3,1,1,1,1,5,1,4,1,1,1,4,1,4,4,1,5,1,1,4,5,1,1,2,1,1,1,4,1,2,1,1,1,1,1,1,5,1,3,1,1,4,4,1,1,5,1,2,1,1,1,1,5,1,3,1,1,1,2,2,1,4,1,3,1,4,1,2,1,1,1,1,1,3,2,5,4,4,1,3,2,1,4,1,3,1,1,1,2,1,1,5,1,2,1,1,1,2,1,4,3,1,1,1,4,1,1,1,1,1,2,2,1,1,5,1,1,3,1,2,5,5,1,4,1,1,1,1,1,2,1,1,1,1,4,5,1,1,1,1,1,1,1,1,1,3,4,4,1,1,4,1,3,4,1,5,4,2,5,1,2,1,1,1,1,1,1,4,3,2,1,1,3,2,5,2,5,5,1,3,1,2,1,1,1,1,1,1,1,1,1,3,1,1,1,3,1,4,1,4,2,1,3,4,1,1,1,2,3,1,1,1,4,1,2,5,1,2,1,5,1,1,2,1,2,1,1,1,1,4,3,4,1,5,5,4,1,1,5,2,1,3")

;--- FUNCTONS ---
; define some shortcuts
(define (inc n) (+ n 1))

(define (dec n (- n 1))

; and lispy functions not included in MyLisp:

; count items matching a predicate
(define (count pred lst . opt)
  (let ((tally (if (null? opt) 0 (car opt))))
    (if (null? lst) tally
        (count (cdr lst) (inc tally)))))

; generate a range of numbers
(define (iota n . opt)
  (let ((start 0) (step 1) (lst '()))
    (when (not (null? opt))
      (set! start (car opt))
      (when (not (null? (cdr opt)))
        (set! step (cadr opt))
        (if (not (null? (cddr opt)))
          (set! lst (caddr opt)))))
     (if (zero? n) lst
         (let ((next (+ start (* (- n 1) step))))
            (iota (- n 1) start step (cons next lst))))))

; iterate a function N times
(define (iterate n fn initial)
  (if (zero? n) initial
      (iterate (dec n) fn (fn initial))))

; extract a sublist
(define (subseq lst start . opt)
  (let ((end (if (null? opt) (inc (length lst)) (car opt))))
    (mapcar (lambda (n) (nth n lst)) (iota (- end start) start))))

;-- MAIN BODY OF SOLUTION --
; parse our data into a list of fish
(set! fish (mapcar string->number (string->list data ",")))

; then convert to a list of counts of each possible timer value (0..8)
(set! counts (mapcar (lambda (i) (count (lambda (n) (= n i)) fish)) (iota 9)))

; define a function to compute the next day's summary from the prior day's
(define (step-day counts)
  (let ((zeroes (car counts)))
    (append (subseq counts 1 7)
            (list (+ zeroes (nth 7 counts)) (nth 8 counts) zeroes))))

; and finally get the puzzle answers
(apply + (iterate 80 step-day counts))
(apply + (iterate 256 step-day counts))
